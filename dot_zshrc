# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
source ~/.powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# bun completions
[ -s "/Users/fabian/.bun/_bun" ] && source "/Users/fabian/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

export PATH="$PATH:/Applications/screenpipe.app/Contents/MacOS"

# Function to update applications managed by Ansible via Chezmoi
# Replaced by pkg() function below
# update-apps() { ... old function content ... }

# Custom package management wrapper for Chezmoi/Ansible setup
pkg() {
  # Default command is 'sync' if none provided, or if first arg is sync
  local command="sync"
  local commit_msg=""
  local git_push_args=""

  # Basic argument parsing
  if [ -n "$1" ]; then
    # Check if it's a known command or part of a commit message for update
    case "$1" in
      sync|install|add|remove|uninstall|list|search|update)
        command="$1"
        shift # Consume the command argument
        ;;
      *)
        # If not a known command, assume default is 'sync' and args are unrelated for now
        # Or, potentially, treat args as targets for install/remove later
        # For update, we might want a -m flag later, but let's keep it simple.
        ;;
    esac
  fi

  local source_dir
  source_dir="$(chezmoi source-path)"
  if [ -z "$source_dir" ]; then
    echo "Error: Could not determine chezmoi source directory." >&2
    return 1
  fi

  # Remember current directory
  local current_dir
  current_dir="$(pwd)"

  # --- Change to Source Directory --- #
  echo "==> Changing to source directory: $source_dir"
  cd "$source_dir" || return 1

  # --- Execute Command --- #
  local script_path="$source_dir/run_onchange_after_apply.sh"
  local exit_code=0

  case "$command" in
    sync)
      if [ ! -f "$script_path" ]; then
        echo "Error: Sync script not found at '$script_path'" >&2
        exit_code=1
      else
        echo "==> Running application sync (Ansible playbook)..."
        chmod +x "$script_path" # Ensure executable
        if ! "$script_path"; then
          echo "Error: Application sync script failed." >&2
          exit_code=1
        else
          echo "==> Application sync script finished."
        fi
      fi
      ;;
    update)
      echo "==> Staging all changes..."
      if ! git add .; then
        echo "Error: git add failed." >&2
        exit_code=1
      else
        # Check if there are changes staged
        if git diff --staged --quiet; then
          echo "==> No changes staged to commit."
        else
          commit_msg="chore: Update dotfiles via pkg update"
          echo "==> Committing changes with message: '$commit_msg'"
          if ! git commit -m "$commit_msg"; then
            echo "Error: git commit failed." >&2
            exit_code=1
          else
            echo "==> Pushing changes to remote (origin HEAD)..."
            # Push current branch to its upstream on origin
            if ! git push origin HEAD; then
              echo "Error: git push failed." >&2
              exit_code=1
            else
              echo "==> Update pushed successfully."
            fi
          fi
        fi
      fi
      ;;
    install|add|remove|uninstall|list|search)
      echo "Error: Command '$command' not yet implemented." >&2
      echo "Usage: pkg [sync|update]" >&2
      exit_code=1
      ;;
    *)
      echo "Error: Unknown command '$command'." >&2
      echo "Usage: pkg [sync|update]" >&2
      exit_code=1
      ;;
  esac

  # --- Change Back --- #
  echo "==> Changing back to original directory: $current_dir"
  cd "$current_dir" || echo "Warning: Could not change back to original directory '$current_dir'" >&2

  return $exit_code
}
