# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
source ~/.powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# bun completions
[ -s "/Users/fabian/.bun/_bun" ] && source "/Users/fabian/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

export PATH="$PATH:/Applications/screenpipe.app/Contents/MacOS"

# Function to update applications managed by Ansible via Chezmoi
# Replaced by pkg() function below
# update-apps() { ... old function content ... }

# Custom package management wrapper for Chezmoi/Ansible setup
pkg() {
  # Default command is 'update' if none provided
  local command="update"
  local commit_msg="chore: Sync dotfiles via pkg sync"
  local show_help=0

  # Argument parsing
  if [ -n "$1" ]; then
    case "$1" in
      update|sync|install|add|remove|uninstall|list|search)
        command="$1"
        shift
        ;;
      help|-h|--help)
        show_help=1
        command="help" # Assign a command name for the case statement
        ;;
      *)
        # If not a known command, assume default 'update'
        # Or handle arguments for install/remove later
        ;;
    esac
  fi

  # --- Help Command --- #
  if [ $show_help -eq 1 ]; then
    echo "Usage: pkg <command>"
    echo ""
    echo "Commands:"
    echo "  update   Update local applications by running the Ansible playbook (Default)"
    echo "  sync     Sync local configuration changes to the remote Git repository"
    # echo "  install  Install packages (Not Implemented)"
    # echo "  remove   Remove packages (Not Implemented)"
    # echo "  list     List configured packages (Not Implemented)"
    echo "  help     Show this help message"
    return 0
  fi

  # --- Get Source Directory (Needed for all commands) --- #
  local source_dir
  source_dir="$(chezmoi source-path)"
  if [ -z "$source_dir" ]; then
    echo ":: Error: Could not determine chezmoi source directory." >&2
    return 1
  fi

  # Remember current directory
  local current_dir
  current_dir="$(pwd)"
  local exit_code=0

  # --- Execute Command --- #
  case "$command" in
    update) # Renamed from sync - Runs Ansible playbook
      local script_path="$source_dir/run_onchange_after_apply.sh"
      if [ ! -f "$script_path" ]; then
        echo ":: Error: Ansible run script not found at '$script_path'" >&2
        exit_code=1
      else
        # Temporarily cd to source dir for script execution context if needed by script
        ( # Run in a subshell to isolate cd
          cd "$source_dir" || exit 1
          echo ":: Running application update (Ansible playbook)..."
          chmod +x "$script_path" # Ensure executable
          if ! "$script_path"; then
            echo ":: Error: Application update script failed." >&2
            # The script itself should output Ansible errors
            exit 1 # Indicate failure in the subshell
          else
            echo ":: Application update finished." # Script indicates success/failure internally
          fi
        )
        exit_code=$? # Capture exit code from subshell
        if [ $exit_code -ne 0 ]; then
           echo ":: Update command finished with errors." >&2
        fi
      fi
      ;;
    sync) # Renamed from update - Git add, commit, push
      echo ":: Syncing local changes to remote repository..."
      # Run git commands within the source directory using a subshell
      (
        cd "$source_dir" || exit 1
        echo ":: Staging changes..."
        if ! git add .; then
            echo ":: Error: git add failed." >&2; exit 1; fi

        if git diff --staged --quiet; then
          echo ":: No changes staged to commit."; exit 0; fi

        echo ":: Committing changes..."
        if ! git commit -m "$commit_msg"; then
            echo ":: Error: git commit failed." >&2; exit 1; fi

        echo ":: Pushing changes to origin..."
        if ! git push origin HEAD; then
            echo ":: Error: git push failed." >&2; exit 1; fi

        echo ":: Sync complete."
      )
      exit_code=$? # Capture exit code from subshell
       if [ $exit_code -ne 0 ]; then
           echo ":: Sync command finished with errors." >&2
       fi
      ;;
    install|add|remove|uninstall|list|search)
      echo ":: Error: Command '$command' not yet implemented." >&2
      echo "Run 'pkg help' for usage."
      exit_code=1
      ;;
    *)
      echo ":: Error: Unknown command '$command'." >&2
      echo "Run 'pkg help' for usage."
      exit_code=1
      ;;
  esac

  return $exit_code
}
